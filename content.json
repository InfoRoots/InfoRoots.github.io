[{"title":"微信扫码支付开发","date":"2017-04-12T07:50:48.059Z","path":"2017/04/12/wxpay_dev/","text":"本文根据小编在项目中开发的过程详解，不好之处，还请多多指点 第一步先把所需要的参数先准备好1、APPID ：参数在微信公众号下的&quot;基本配置&quot;即可获取到。 2、商户号 ： 进入公众号点击 &quot;微信支付&quot; -&gt; 商户信息 -&gt; 就可以看到商户号 3、API密钥 ： 进入微信商户平台 -&gt; 账户中心 -&gt; API安全 -&gt; 安装证书 -&gt; 设置密钥（密钥要32位） 第二步小编使用的是微信支付模式二的开发【分享一个微信支付静态页面：http://download.csdn.net/detail/zwj941107/9811989链接是小编自己设计的一个支付静态页面。页面包含AJAX长轮询异步检查订单状态，有兴趣可前往下载】 首先我们要实例化统一的支付接口 UnifiedOrder_pub , 然后设置一些支付所需的参数 , 接着将参数传递到方法getResult()来生成预支付交易结果，下面是小编在项目开发使用的 123456789101112131415161718//使用统一下单API$unifiedOrder = new UnifiedOrder_pub();//支付所需参数$amount = trim($this-&gt;config['money']);$notify_url = $this-&gt;config['NotifyUrl'];$out_trade_no = $this-&gt;config['code'];$title = $this-&gt;config['title'];//设置参数$unifiedOrder-&gt;setParameter(\"body\",$title);$unifiedOrder-&gt;setParameter(\"out_trade_no\",$out_trade_no);$unifiedOrder-&gt;setParameter(\"total_fee\",$amount);$unifiedOrder-&gt;setParameter(\"notify_url\",$notify_url);$unifiedOrder-&gt;setParameter(\"trade_type\",\"NATIVE\");//传递参数$unifiedOrderResult = $unifiedOrder-&gt;getResult(); 看下输出的结果，参数值小编会替换成注解，让你们能够更好的理解 12345678910111213141516171819202122 array(10) &#123; [\"return_code\"]=&gt; string(7) \"SUCCESS\" [\"return_msg\"]=&gt; string(2) \"OK\" [\"appid\"]=&gt; string(18) \"公众号APPID\" [\"mch_id\"]=&gt; string(10) \"商户号ID\" [\"nonce_str\"]=&gt; string(16) \"随机字符串\" [\"sign\"]=&gt; string(32) \"签名\" [\"result_code\"]=&gt; string(7) \"SUCCESS\" [\"prepay_id\"]=&gt; string(36) \"wx20170413145149819904c0890820522634\" [\"trade_type\"]=&gt; string(6) \"支付方式，如果是JsApi方式需要Openid；Native方式必须需要product_id\" [\"code_url\"]=&gt; string(35) \"weixin://wxpay/bizpayurl?pr=tMm7zOM\"&#125; 生成二维码，调用qrcode程序来实现二维码的生成 qrcode程序下载地址：http://download.csdn.net/detail/zwj941107/9812985 12345678910111213141516171819202122232425/*举个例子*/&lt;html&gt; &lt;head&gt; &lt;title&gt;微信扫码支付&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"qrcode\"&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src=\"qrcode程序路径\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; var url = \"code_url路径\"; var qr = qrcode(10, \"M\"); qr.addData(url); qr.make(); var wording=document.createElement(\"p\"); wording.innerHTML = \"支付完成前，请勿关闭\"; var code=document.createElement(\"DIV\"); code.innerHTML = qr.createImgTag(); var element=document.getElementById(\"qrcode\"); element.appendChild(wording); element.appendChild(code);'; &lt;/script&gt;&lt;/html&gt; 第三步异步检查订单状态小编使用的是通过setInterval来定时使用AJAX异步检查订单状态的方式。 1234567891011121314151617181920 setInterval(function()&#123; $.ajax(&#123; url:'跳转路径', type: \"post\", data: &#123;out_trade_no:获取微信订单号和商户订单号其中一个用来查询用户是否支付成功&#125;, dataType: \"text\", success: function(res)&#123; if(res.indexOf('success')&gt;-1)&#123; if(res.substring(0)=='1') &#123; $(\"#qrcode p\").text('支付成功'); setTimeout(function()&#123;self.location='要跳转的路径';&#125;,1000); &#125; else &#123; $(\"#qrcode p\").text('支付成功'); setTimeout(function()&#123;self.location='要跳转的路径';&#125;,1000); &#125; &#125; &#125; &#125;); &#125;,3000); 后台的处理小编给各位读者讲个大概思路先判断$_POST[&apos;out_trade_no&apos;]是否有值，然后我们引用微信的查询订单接口OrderQuery_pub把参数传递过去，通过getResult方法来获取订单是否支付成功，并返回一个结果给AJAX，你们也可以对获取到的订单信息作出相应的处理和检验。 看到这里的朋友也证明对小编的文章感兴趣，小编相信，只要思路是清晰的，不管什么语言，都能够做出同样的效果。如果这篇文章对你有帮助，请帮作者点个Star,GitHub地址","tags":[]},{"title":"Thinkphp5实现URL重定向","date":"2017-03-23T02:00:27.519Z","path":"2017/03/23/URL_Rewrite/","text":"本文详细描述了小编给Thinkphp5配置URL重定向时的过程，不好之处，还请多多指点，本文以IIS为例 创建.htaccess,将下面代码写入文件内12345678&lt;IfModule mod_rewrite.c&gt; Options +FollowSymlinks -Multiviews RewriteEngine On RewriteCond %&#123;REQUEST_FILENAME&#125; !-d RewriteCond %&#123;REQUEST_FILENAME&#125; !-f RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]&lt;/IfModule&gt; 安装URL重写组件先安装URL组件，小编已经把组件64位和32位发布到CSDNhttp://download.csdn.net/detail/zwj941107/9790754 如果觉得版本太旧下面是官网链接，不过不翻墙会访问会比较慢https://www.iis.net/downloads/microsoft/url-rewrite#additionalDownloads 小编在这里就不演示安装了，都是直接点下一步，安装完成要重启 重启完成你打开IIS可以看到一个URL Rewrite 选择右边栏的 Import Rules(-_-英文版,小编也很烦) 最后了，看图中的红字，输入完点击Import，完成，好了，试试访问下网站吧 以下是小编配置成功的页面 如果这篇文章对你有帮助，请帮作者点个Star,GitHub地址","tags":[]},{"title":"微信登陆开发详解","date":"2017-03-13T00:50:15.251Z","path":"2017/03/13/wechat_Wifi/","text":"本文详细描述了小编在开发微信登陆时的过程，不好之处，还请多多指点 如果这篇文章对你有帮助，请帮作者点个Star,GitHub地址","tags":[]},{"title":"Hexo-GitHubPage配置详解","date":"2017-03-10T03:34:21.730Z","path":"2017/03/10/hexo-GitHubPage/","text":"本文详细描述了如何在Github上，使用Hexo部署博客 Hexo的安装申请GitHub账号注册地址：账号注册 创建博客仓库 注意，仓库名应该为：用户名.github.io。比如，我的仓库名是：InfoRoots.github.io。 安装Git下载地址：git 配置SSH个人推荐教程:从0开始学习 GitHub 系列 安装Nginx下载地址: Nginx，执行安装，在cmd使用 node -v的命令来测试NodeJS是否安装成功 1node -v 成功会显示node的版本号 安装Hexo在本地新建一个Blog文件夹，文件右键，选择Git Bash Here。 输入指令安装hexo 1$ npm install -g hexo-cli 初始化Hexo1$ hexo init hexo-cli 初始化成功会显示Start blogging with Hexo! 进入hexo-cli文件目录,安装依赖文件以及部署形成文件123$ cd hexo-cli$ npm install$ hexo generate 初探Hexo1$ hexo server 默认的地址是：http://localhost:4000/ 将本地Hexo项目托管到Github配置GitHubPage进入仓库，点击右边的”Setting”菜单进入设置,下拉选择”master branch” 打开修改hexo_cli目录下配置文件_config.yml。修改deploy 部署你本地的主题到github上，使用下面命令123$ hexo clean$ hexo g$ hexo d 如果这篇文章对你有帮助，请帮作者点个Star,GitHub地址","tags":[]},{"title":"微信WIFI与深信服开发详解","date":"2017-03-10T03:08:39.506Z","path":"2017/03/10/wechat_dev/","text":"本文详细描述了小编在开发微信WIFI与深信服之间连接时的过程，不好之处，还请多多指点 如果这篇文章对你有帮助，请帮作者点个Star,GitHub地址","tags":[]}]